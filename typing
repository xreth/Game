from random import choice, randrange
from string import ascii_lowercase
from turtle import *
import time

class Vector:
    def __init__(self, x, y):
        self.position = [x, y]

    @property
    def x(self):
        return self.position[0]

    @x.setter
    def x(self, value):
        self.position[0] = value

    @property
    def y(self):
        return self.position[1]

    @y.setter
    def y(self, value):
        self.position[1] = value

targets = []
letters = []
score = 0
base_speed = 11  # Adjusted speed
current_speed = base_speed
difficulty = "easy"
level = 1

visible_duration = 3
invisible_duration = 1.5
flash_interval = visible_duration + invisible_duration
color_transition_steps = 30
color_transition_speed = (visible_duration / color_transition_steps)

def setup_screen():
    screen = Screen()
    screen.setup(width=800, height=800)
    screen.bgcolor("black")
    screen.screensize(800, 800)
    screen.tracer(False)
    screen.title("Falling Letters Game")
    
    # Disable window resizing
    screen.setup(width=800, height=800)
    screen._root.resizable(False, False) 

def setup_score_turtle():
    score_turtle = Turtle()
    score_turtle.hideturtle()
    score_turtle.penup()
    score_turtle.color("lime")
    score_turtle.goto(-390, 370)
    return score_turtle

score_turtle = None
start_time = time.time()

def update_score_display():
    global score_turtle
    if score_turtle:
        score_turtle.clear()
        score_turtle.write(f"Score: {score}", align='left', font=('Consolas', 20, 'normal'))

def inside(point):
    if point.x < -400 or point.x > 400:
        return False
    if point.y < -400 or point.y > 400:
        return False
    return True

def color_transition(step):
    black = (0, 0, 0)
    dark_green = (0, 0.2, 0)
    green = (0, 0.4, 0)
    light_green = (0, 1, 0)
    phase = step / color_transition_steps
    if phase < 0.5:
        r = 0
        g = black[1] + (dark_green[1] - black[1]) * (phase * 2)
        b = black[2] + (dark_green[2] - black[2]) * (phase * 2)
    elif phase < 0.75:
        r = 0
        g = dark_green[1] + (green[1] - dark_green[1]) * ((phase - 0.5) * 4)
        b = dark_green[2] + (green[2] - dark_green[2]) * ((phase - 0.5) * 4)
    else:
        r = 0
        g = green[1] + (light_green[1] - green[1]) * ((phase - 0.75) * 4)
        b = green[2] + (light_green[2] - green[2]) * ((phase - 0.75) * 4)
    r = max(0, min(1, r))
    g = max(0, min(1, g))
    b = max(0, min(1, b))
    return (r, g, b)

def draw():
    clear()
    current_time = time.time()
    for target, letter, creation_time in zip(targets, letters, creation_times):
        goto(target.x, target.y)
        elapsed_time = current_time - creation_time
        flash_step = (elapsed_time % flash_interval) / flash_interval
        if flash_step < (visible_duration / flash_interval):
            step = int((elapsed_time % flash_interval) / color_transition_speed)
            pencolor(color_transition(step))
        else:
            step = int((elapsed_time % flash_interval) / color_transition_speed)
            pencolor(color_transition(color_transition_steps // 2 + step))
        write(letter, align='center', font=('Consolas', 20, 'normal'))
    update_score_display()
    update()

def move():
    global current_speed, level
    if randrange(20) == 0:
        x = randrange(-400, 400)
        target = Vector(x, 400)
        targets.append(target)
        letter = choice(ascii_lowercase)
        letters.append(letter)
        creation_times.append(time.time())
    for target in targets:
        target.y -= 1
    draw()
    targets[:] = [target for target in targets if inside(target)]
    letters[:] = [letter for i, letter in enumerate(letters) if inside(targets[i])]
    creation_times[:] = [creation_time for i, creation_time in enumerate(creation_times) if inside(targets[i])]
    ontimer(move, int(current_speed))

def press(key):
    global score, level
    if key in letters:
        score += 1
        pos = letters.index(key)
        del targets[pos]
        del letters[pos]
        del creation_times[pos]
    else:
        score -= 1
    if score > 0 and score % 10 == 0:
        level += 1
        print(f'Level up! Now on level {level}.')
    update_score_display()

def set_difficulty(level):
    global current_speed, difficulty
    difficulty = level
    if level == "easy":
        current_speed = base_speed * 1.8
    elif level == "hard":
        current_speed = base_speed * 1.4
    elif level == "extreme":
        current_speed = base_speed * 1.2
    elif level == "learning":
        current_speed = base_speed * 1.1
    start_game()

def increase_speed():
    global current_speed
    elapsed_time = time.time() - start_time
    if elapsed_time >= 60:
        current_speed = base_speed * 0.3
    elif elapsed_time >= 30:
        current_speed = base_speed * 0.5
    elif elapsed_time >= 10:
        current_speed = base_speed * 0.7
    ontimer(increase_speed, 1000)

def start_game():
    setup_screen()
    global score_turtle, start_time, creation_times
    score_turtle = setup_score_turtle()
    start_time = time.time()
    creation_times = []
    listen()
    for letter in ascii_lowercase:
        onkey(lambda letter=letter: press(letter), letter)
    move()
    increase_speed()
    done()

def pre_screen():
    setup_screen()
    pencolor("lime")
    hideturtle()
    up()
    goto(0, 300)
    write("Select Difficulty:", align='center', font=('Consolas', 30, 'normal'))
    goto(0, 240)
    write("'e' for Easy", align='center', font=('Consolas', 20, 'normal'))
    goto(0, 180)
    write("'h' for Hard", align='center', font=('Consolas', 20, 'normal'))
    goto(0, 120)
    write("'x' for Extreme", align='center', font=('Consolas', 20, 'normal'))
    goto(0, 60)
    write("'l' for Learning", align='center', font=('Consolas', 20, 'normal'))
    update()
    onkey(lambda: set_difficulty("easy"), 'e')
    onkey(lambda: set_difficulty("hard"), 'h')
    onkey(lambda: set_difficulty("extreme"), 'x')
    onkey(lambda: set_difficulty("learning"), 'l')
    listen()

pre_screen()
done()
